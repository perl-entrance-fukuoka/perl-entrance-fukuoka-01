use strict;
use warnings;
use utf8;
# use utf8 する事により、ソースコード中のテキストデータを
# Perlの内部形式に変換することができます。
# 内部形式に変換されていないテキストデータは単純にオクテット列
#（8bitのビット列）として扱われます。内部形式に変換することで
# 適切にデータを文字列として扱う事ができるようになります。

use Encode qw(encode_utf8); # Encodeモジュールの読み込み
# Encodeモジュールは文字コードの変換を行うモジュールです。
# Encode の後に続く文字列は、Encodeモジュール内で定義されている
# encode_utf8 関数をインポートするという意味になります。
# インポートしない場合は、Encode::encode_utf8(文字列)と
# 関数を完全修飾して呼び出す必要があります。

# qw()はリストを定義するのに使います。リストは通常()で括り
# カンマで区切る事で定義しますが、qw演算子はカンマの代わりに
# 空白文字を使い、文字列のクオートを省略できます。
# 下記の２行は両方とも配列arrayに同じリストを代入します。
# @array = ('foo', 'bar', 'baz');
# @array = qw(foo bar baz);

my $app = sub {
    my $env = shift;
    return [
        200,
        [ 'Content-Type' => 'text/plain; charset=UTF-8' ],
        # 「データの形式はテキストで文字コードはUTF-8です」という意味になります。
        [ encode_utf8('こんにちは、世界') ],
        # 「こんにちわ、世界」という引数で「encode_utf8」という関数を呼び出しています。
        # encode_utf8は、内部形式の文字列をオクテット列に変換します。
        # 出力のときは内部形式からオクトット列へエンコードする。
        # 入力のときはオクテット列から内部形式へデコードする。
        # と覚えると文字化けなどが起こりにくくなります。
    ];
};
