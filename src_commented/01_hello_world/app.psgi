use strict;     # 変数の宣言を強制します。
use warnings;   # 望ましくないことを警告します。
use utf8;       # 文字化け対策です。

my $app = sub {
    # 「my」は変数の宣言時に使用します。my宣言された変数は局所化されます。
    # 「$app」は変数です。「=」に続けて値を代入する事ができます。
    # 「sub」は関数の宣言時に使用します。sub 関数名 { 定義 } のように記述します。
    #  関数名を省略した場合、無名関数となります。
    # 上記は変数$appに無名関数を代入するという意味になります。
    my $env = shift;
    # Perlの関数に与えられた引数は「@_」という特殊変数(配列)に格納されます。
    # 引数を配列から取り出すには「shift」を使います。
    # shiftは対象となる配列名を省略すると@_が対象となります。
    # 上記は変数$envに関数に渡された引数の最初の値を代入するという意味になります。
    return [ 200, [ 'Content-Type' => 'text/plain' ], ['Hello World'], ];
    # 「return」は関数の処理結果を戻り値として返します。
    # 「200」のような数値はそのまま記述できますが「Content-Type」などの文字列は「'」や「"」で括る必要があります。
    # 「200」はHTTPステータスコードで「リクエストは成功ですよ」という意味です。
    # 「'Content-Type' => 'text/plain'」は「データの形式はテキストですよ」という意味です。
    # 「'Hello World'」は、実際のデータです。
    # []で括られた部分は無名配列です。配列内の要素は「,」で区切ります。
    # []を[1, [], []]のようにする事で多次元配列にすることができます。
    # 「=>」は「,」と同じ意味です。名前に対する値を表現する際に可読性が向上します。
    # 上記は多次元配列を関数の戻り値として返すという意味になります。
};

